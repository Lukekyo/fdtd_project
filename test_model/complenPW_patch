class ComplexPlaneWave:
“”“A 2D plane wave source with Lumerical-style spectrum control”””

```
def __init__(
    self,
    # 主要參數 - 模仿 Lumerical 的介面
    wavelength_min: float,
    wavelength_max: float,
    
    # 其他參數
    amplitude: complex = 1.0 + 0.0j,
    phase_shift: float = 0.0,
    theta_deg: float = 0.0,
    polarization_axis: str = "x",
    name: str = None,
    
    # 進階選項 (一般不需要手動設定)
    auto_pulse_params: bool = True,
    manual_cycle: int = None,
    hanning_dt: float = None,
    medium_n: float = None
):
    """
    創建ComplexPlaneWave，模仿 Lumerical 的直觀介面
    
    Args:
        wavelength_min: 最小波長 (m)
        wavelength_max: 最大波長 (m)
        
    注意：
        - 當 wavelength_min == wavelength_max 時 → 單頻連續波
        - 當 wavelength_min != wavelength_max 時 → 寬頻脈衝
    """
    
    # 驗證輸入
    if wavelength_min <= 0 or wavelength_max <= 0:
        raise ValueError("波長必須大於 0")
    if wavelength_min > wavelength_max:
        raise ValueError("wavelength_min 不能大於 wavelength_max")
    
    # 基本參數
    self.wavelength_min = wavelength_min
    self.wavelength_max = wavelength_max
    self.wavelength_center = (wavelength_min + wavelength_max) / 2
    self.wavelength_span = wavelength_max - wavelength_min
    
    self.amplitude = amplitude
    self.phase_shift = phase_shift
    self.theta_deg = theta_deg
    self.theta = bd.deg2rad(theta_deg)
    self.polarization_axis = polarization_axis.lower()
    self.name = name
    self.n = medium_n if medium_n is not None else 1.0
    
    # 自動判斷單頻/寬頻
    tolerance = 1e-12  # 浮點數比較容差
    self.is_monochromatic = abs(wavelength_max - wavelength_min) < tolerance
    
    if self.is_monochromatic:
        # 單頻模式 - 使用連續波
        self.source_type = "monochromatic_cw"
        self.pulse = False
        self.wavelength = wavelength_min  # min = max
        
    else:
        # 寬頻模式 - 使用脈衝
        self.source_type = "broadband_pulse"
        self.pulse = True
        self.wavelength = self.wavelength_center
        
        # 自動計算脈衝參數
        if auto_pulse_params and manual_cycle is None:
            relative_bandwidth = self.wavelength_span / self.wavelength_center
            # cycle 數與相對頻寬成反比，確保頻譜覆蓋
            self.cycle = max(3, min(20, int(2.0 / relative_bandwidth)))
        else:
            self.cycle = manual_cycle if manual_cycle is not None else 5
    
    # 計算頻率參數
    self.frequency_center = bd.c0 / self.n / self.wavelength_center
    self.frequency_min = bd.c0 / self.n / wavelength_max  # 注意反向
    self.frequency_max = bd.c0 / self.n / wavelength_min  # 注意反向
    self.frequency = self.frequency_center
    
    self.period = 1.0 / self.frequency
    self.omega = 2 * bd.pi * self.frequency
    self.k = 2 * np.pi / self.wavelength
    
    # 計算頻譜特性
    self.frequency_bandwidth = self.frequency_max - self.frequency_min
    self.relative_bandwidth = self.wavelength_span / self.wavelength_center
    
    # 其他設定
    self.hanning_dt = hanning_dt
    
    # 初始化其他屬性
    self.grid = None
    self.period_sim = None
    self.frequency_sim = None
    self.omega_sim = None
    self.hanning_dt_sim = None
    self.monitoring_enabled = False
    self.monitor_data = {
        'timesteps': [],
        'E_field': [],
        'envelope': [],
        'phase': []
    }

@classmethod
def monochromatic(cls, wavelength: float, **kwargs):
    """便捷方法：創建單頻光源"""
    return cls(wavelength_min=wavelength, wavelength_max=wavelength, **kwargs)

@classmethod
def broadband_range(cls, wavelength_min: float, wavelength_max: float, **kwargs):
    """便捷方法：創建寬頻光源 (範圍)"""
    return cls(wavelength_min=wavelength_min, wavelength_max=wavelength_max, **kwargs)

@classmethod
def broadband_center_span(cls, wavelength_center: float, wavelength_span: float, **kwargs):
    """便捷方法：創建寬頻光源 (中心+跨度)"""
    wavelength_min = wavelength_center - wavelength_span / 2
    wavelength_max = wavelength_center + wavelength_span / 2
    return cls(wavelength_min=wavelength_min, wavelength_max=wavelength_max, **kwargs)

def get_spectrum_info(self):
    """返回頻譜資訊"""
    return {
        'source_type': self.source_type,
        'is_monochromatic': self.is_monochromatic,
        'wavelength_min_nm': self.wavelength_min * 1e9,
        'wavelength_max_nm': self.wavelength_max * 1e9,
        'wavelength_center_nm': self.wavelength_center * 1e9,
        'wavelength_span_nm': self.wavelength_span * 1e9,
        'frequency_center_THz': self.frequency_center / 1e12,
        'frequency_bandwidth_THz': self.frequency_bandwidth / 1e12,
        'relative_bandwidth_percent': self.relative_bandwidth * 100,
        'pulse_enabled': self.pulse,
        'pulse_cycles': self.cycle if self.pulse else None
    }

def print_spectrum_info(self):
    """列印頻譜資訊，模仿 Lumerical 的顯示風格"""
    info = self.get_spectrum_info()
    
    print(f"📊 Source: {self.name or 'ComplexPlaneWave'}")
    print(f"   Type: {'Monochromatic' if info['is_monochromatic'] else 'Broadband'}")
    
    if info['is_monochromatic']:
        print(f"   Wavelength: {info['wavelength_center_nm']:.1f} nm")
        print(f"   Mode: Continuous Wave (CW)")
    else:
        print(f"   Wavelength range: {info['wavelength_min_nm']:.1f} - {info['wavelength_max_nm']:.1f} nm")
        print(f"   Center wavelength: {info['wavelength_center_nm']:.1f} nm")
        print(f"   Bandwidth: {info['wavelength_span_nm']:.1f} nm ({info['relative_bandwidth_percent']:.1f}%)")
        print(f"   Mode: Pulsed ({info['pulse_cycles']} cycles)")
    
    print(f"   Frequency: {info['frequency_center_THz']:.2f} THz")
    
    if not info['is_monochromatic']:
        print(f"   Frequency bandwidth: {info['frequency_bandwidth_THz']:.2f} THz")

def _register_grid(self, grid, x, y, z):
    """註冊到網格的方法 (原有的邏輯)"""
    # 這裡保持原有的網格註冊邏輯
    # ...
    pass

def update_E(self):
    """更新電場的方法 (原有的邏輯)"""
    # 這裡保持原有的電場更新邏輯
    # ...
    pass
```

# 使用範例

def demonstrate_lumerical_style():
“”“展示 Lumerical 風格的使用方式”””

```
print("=== Lumerical 風格的光源設定 ===\n")

# 方式1: 像 Lumerical 一樣設定單頻 (min = max)
print("1. 單頻光源 (模仿 Lumerical min=max 設定):")
source1 = ComplexPlaneWave(wavelength_min=1550e-9, wavelength_max=1550e-9)
source1.print_spectrum_info()
print()

# 方式2: 像 Lumerical 一樣設定寬頻 (min ≠ max)
print("2. 寬頻光源 (模仿 Lumerical min≠max 設定):")
source2 = ComplexPlaneWave(wavelength_min=1500e-9, wavelength_max=1600e-9)
source2.print_spectrum_info()
print()

# 方式3: 便捷方法
print("3. 便捷方法:")
source3a = ComplexPlaneWave.monochromatic(wavelength=1550e-9)
source3b = ComplexPlaneWave.broadband_center_span(
    wavelength_center=1550e-9, 
    wavelength_span=100e-9
)

print("單頻便捷方法:")
source3a.print_spectrum_info()
print()

print("寬頻便捷方法:")
source3b.print_spectrum_info()
```

if **name** == “**main**”:
demonstrate_lumerical_style()