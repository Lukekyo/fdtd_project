
import os
import matplotlib.pyplot as plt
import matplotlib.patches as ptc
from matplotlib.colors import LogNorm

from .backend import backend as bd

def visualize(
    grid,
    x=None,
    y=None,
    z=None,
    cmap="Blues",
    pbcolor="C3",
    pmlcolor=(0, 0, 0, 0.1),
    objcolor=(1, 0, 0, 0.1),
    blochcolor=(0.6, 0.4, 0.9, 0.8),
    srccolor="C0",
    detcolor="C2",
    norm="linear",
    animate=False,
    index=None,
    save=False,
    folder=None,
    show=False,
    style=None,
    real_field_mode=False,
    real_component="Ex",
):
    if style is not None:
        plt.style.use(style)
    if norm not in ("linear", "lin", "log"):
        raise ValueError("Color map normalization should be 'linear' or 'log'.")

    from .sources import PointSource, LineSource, PlaneSource, ComplexLineSource
    from .boundaries import (
        _PeriodicBoundaryX, _PeriodicBoundaryY, _PeriodicBoundaryZ,
        _PMLXlow, _PMLXhigh, _PMLYlow, _PMLYhigh, _PMLZlow, _PMLZhigh,
        BlochBoundary
    )

    if animate:
        plt.pause(0.02)
        plt.clf()
        plt.ion()

    if x is not None:
        assert grid.Ny > 1 and grid.Nz > 1
        xlabel, ylabel = "y", "z"
        Nx, Ny = grid.Ny, grid.Nz
        pbx, pby = _PeriodicBoundaryY, _PeriodicBoundaryZ
        pmlxl, pmlxh, pmlyl, pmlyh = _PMLYlow, _PMLYhigh, _PMLZlow, _PMLZhigh
    elif y is not None:
        assert grid.Nx > 1 and grid.Nz > 1
        xlabel, ylabel = "z", "x"
        Nx, Ny = grid.Nz, grid.Nx
        pbx, pby = _PeriodicBoundaryZ, _PeriodicBoundaryX
        pmlxl, pmlxh, pmlyl, pmlyh = _PMLZlow, _PMLZhigh, _PMLXlow, _PMLXhigh
    elif z is not None:
        assert grid.Nx > 1 and grid.Ny > 1
        xlabel, ylabel = "x", "y"
        Nx, Ny = grid.Nx, grid.Ny
        pbx, pby = _PeriodicBoundaryX, _PeriodicBoundaryY
        pmlxl, pmlxh, pmlyl, pmlyh = _PMLXlow, _PMLXhigh, _PMLYlow, _PMLYhigh
    else:
        raise ValueError("Visualization only works for 2D grids")

    if real_field_mode:
        comp_idx = {"Ex": 0, "Ey": 1, "Ez": 2}[real_component]
        if x is not None:
            data = bd.numpy(grid.E[x, :, :, comp_idx].real)
        elif y is not None:
            data = bd.numpy(grid.E[:, y, :, comp_idx].real).T
        elif z is not None:
            data = bd.numpy(grid.E[:, :, z, comp_idx].real)
        grid_energy = data
    else:
        grid_energy = bd.sum(grid.E**2 + grid.H**2, -1)
        if x is not None:
            grid_energy = grid_energy[x, :, :]
        elif y is not None:
            grid_energy = grid_energy[:, y, :].T
        elif z is not None:
            grid_energy = grid_energy[:, :, z]

    cmap_norm = None
    if norm == "log":
        cmap_norm = LogNorm(vmin=1e-4, vmax=grid_energy.max() + 1e-4)

    plt.imshow(
        abs(grid_energy),
        cmap=cmap,
        interpolation="sinc",
        norm=cmap_norm
    )
    plt.ylabel(xlabel)
    plt.xlabel(ylabel)
    plt.ylim(Nx, -1)
    plt.xlim(-1, Ny)
    plt.tight_layout()

    if save:
        plt.savefig(os.path.join(folder, f"file{str(index).zfill(4)}.png"))
    if show:
        plt.show()

    return plt.gcf()