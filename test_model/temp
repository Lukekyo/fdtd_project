# 阻抗問題修正工具

import numpy as np

def fix_impedance_problem(grid, grid_spacing):
“””
修正FDTD中的阻抗問題（H場過大問題）
“””

```
print("🔧 阻抗問題修正")
print("="*50)

# 1. 診斷當前狀況
E_max = float(np.max(np.abs(grid.E)))
H_max = float(np.max(np.abs(grid.H)))
current_impedance = E_max / H_max if H_max > 0 else 0
target_impedance = 377.0

print(f"當前狀況:")
print(f"  |E|_max = {E_max:.3e}")
print(f"  |H|_max = {H_max:.3e}")
print(f"  實際阻抗 = {current_impedance:.1f} Ω")
print(f"  目標阻抗 = {target_impedance:.1f} Ω")

# 2. 計算修正因子
correction_factor = current_impedance / target_impedance
print(f"\n修正因子 = {correction_factor:.2f}")
print(f"需要將H場除以 {correction_factor:.2f}")

# 3. 分析問題根源
print(f"\n🔍 問題根源分析:")

# 檢查時間步長
c = 3e8
expected_dt = grid.courant_number * grid_spacing / c
actual_dt = grid.time_step
dt_ratio = actual_dt / expected_dt

print(f"  時間步長檢查:")
print(f"    預期 dt = {expected_dt:.2e} s")
print(f"    實際 dt = {actual_dt:.2e} s")
print(f"    比例 = {dt_ratio:.2e}")

if abs(dt_ratio - 1) > 0.1:
    print(f"    ❌ 時間步長異常！")
    time_step_problem = True
else:
    print(f"    ✅ 時間步長正常")
    time_step_problem = False

# 檢查物理常數
mu0 = 4e-7 * np.pi
expected_h_coeff = actual_dt / mu0

print(f"\n  H場更新係數檢查:")
print(f"    理論係數 dt/μ₀ = {expected_h_coeff:.2e}")
print(f"    如果係數過大 {correction_factor:.0f} 倍，說明:")

if correction_factor > 100:
    print(f"    ❌ H場更新係數嚴重過大")
    print(f"    可能原因：")
    print(f"      1. time_step 計算錯誤")
    print(f"      2. μ₀ 值錯誤")
    print(f"      3. curl_E 函數有額外係數")
    print(f"      4. update_H 中有重複係數")

return correction_factor, time_step_problem
```

def apply_temporary_fix(grid, correction_factor):
“””
應用臨時修正（僅用於測試）
“””
print(f”\n🚨 應用臨時修正（僅用於測試）”)
print(f”將H場除以 {correction_factor:.2f}”)

```
# 保存原始H場
H_original = grid.H.copy()

# 修正H場
grid.H = grid.H / correction_factor

# 重新檢查阻抗
E_max = float(np.max(np.abs(grid.E)))
H_max = float(np.max(np.abs(grid.H)))
new_impedance = E_max / H_max if H_max > 0 else 0

print(f"修正後阻抗: {new_impedance:.1f} Ω")

if abs(new_impedance - 377) < 50:
    print(f"✅ 阻抗修正成功！")
    return True, H_original
else:
    print(f"❌ 阻抗仍然異常")
    grid.H = H_original  # 恢復原始值
    return False, H_original
```

def investigate_root_cause(grid, grid_spacing):
“””
深入調查根本原因
“””
print(f”\n🔬 深入調查根本原因”)
print(”=”*40)

```
# 1. 檢查Grid初始化參數
print(f"1. Grid初始化檢查:")
print(f"   courant_number: {grid.courant_number}")
print(f"   time_step: {grid.time_step:.2e}")
print(f"   grid_spacing: {grid_spacing:.2e}")

# 2. 檢查物理常數
print(f"\n2. 物理常數檢查:")

# 檢查grid.py中的常數定義
c_from_grid = grid_spacing * grid.courant_number / grid.time_step
print(f"   從網格推算的光速: {c_from_grid:.2e} m/s")
print(f"   標準光速: 3.0e8 m/s")

c_error = abs(c_from_grid - 3e8) / 3e8 * 100
print(f"   光速誤差: {c_error:.1f}%")

if c_error > 10:
    print(f"   ❌ 光速計算異常！")
    print(f"   可能問題：")
    print(f"     - grid_spacing 單位錯誤")
    print(f"     - time_step 計算錯誤")
    print(f"     - courant_number 設定錯誤")

# 3. 檢查材料參數
print(f"\n3. 材料參數檢查:")

# 檢查 inverse_permeability
perm_sample = grid.inverse_permeability[grid.Nx//2, 0, grid.Nz//2, 0]
perm_value = float(perm_sample.real) if hasattr(perm_sample, 'real') else float(perm_sample)

print(f"   inverse_permeability: {perm_value:.6f}")

if abs(perm_value - 1.0) > 0.01:
    print(f"   ❌ inverse_permeability ≠ 1.0")
    print(f"   這會導致H場更新異常！")
else:
    print(f"   ✅ inverse_permeability = 1.0")

return c_error, perm_value
```

def suggest_permanent_fixes(correction_factor, time_step_problem, c_error, perm_value):
“””
建議永久性修正方案
“””
print(f”\n💡 永久性修正建議”)
print(”=”*40)

```
print(f"根據診斷結果，建議按優先級修正：")

# 優先級1：時間步長問題
if time_step_problem or c_error > 10:
    print(f"\n🎯 優先級1：修正時間步長計算")
    print(f"   問題：Grid.__init__() 中的 time_step 計算")
    print(f"   檢查：")
    print(f"     self.time_step = self.courant_number * self.grid_spacing / bd.c0")
    print(f"   可能問題：")
    print(f"     - bd.c0 的值不是 3e8")
    print(f"     - grid_spacing 單位錯誤")
    print(f"     - courant_number 計算錯誤")
    print(f"   修正方法：")
    print(f"     在 Grid.__init__() 中添加調試：")
    print(f"     print(f'bd.c0 = {{bd.c0}}')") 
    print(f"     print(f'time_step calculation: {{self.courant_number}} * {{self.grid_spacing}} / {{bd.c0}}')")

# 優先級2：材料參數問題
if abs(perm_value - 1.0) > 0.01:
    print(f"\n🎯 優先級2：修正材料參數")
    print(f"   問題：inverse_permeability ≠ 1.0")
    print(f"   檢查：Grid.__init__() 中的材料參數初始化")
    print(f"   修正：確保 permeability=1.0 正確設定")

# 優先級3：H場更新方程
if correction_factor > 10:
    print(f"\n🎯 優先級3：檢查H場更新方程")
    print(f"   問題：H場更新係數過大 {correction_factor:.0f} 倍")
    print(f"   檢查位置：")
    print(f"     1. grid.py 中的 update_H() 函數")
    print(f"     2. curl_E() 函數是否有額外係數")
    print(f"     3. 是否有重複的時間或空間係數")
    print(f"   修正方法：")
    print(f"     在 update_H() 中添加調試：")
    print(f"     print(f'courant_number: {{self.courant_number}}')") 
    print(f"     print(f'inverse_permeability sample: {{self.inverse_permeability[10,0,10,0]}}')")
    print(f"     curl_max = bd.max(bd.abs(curl_E(self.E)))")
    print(f"     print(f'curl_E max: {{curl_max}}')")
```

def complete_impedance_fix(grid, grid_spacing):
“””
完整的阻抗問題修正流程
“””
print(“🚨 完整阻抗問題診斷與修正”)
print(”=”*60)

```
# 步驟1：診斷問題
correction_factor, time_step_problem = fix_impedance_problem(grid, grid_spacing)

# 步驟2：深入調查
c_error, perm_value = investigate_root_cause(grid, grid_spacing)

# 步驟3：嘗試臨時修正（用於驗證）
print(f"\n" + "="*50)
temp_fix_success, H_original = apply_temporary_fix(grid, correction_factor)

if temp_fix_success:
    print(f"\n✅ 臨時修正成功！證明問題確實是H場係數錯誤")
    print(f"📋 現在可以用修正後的H場計算正確的T/R")
    
    # 測試一下T/R計算
    print(f"\n🧪 測試修正後的T/R計算...")
    test_power_calculation(grid, grid_spacing)
    
    # 恢復原始H場
    grid.H = H_original
    print(f"\n⚠️ H場已恢復原始值")

# 步驟4：提供永久修正建議
suggest_permanent_fixes(correction_factor, time_step_problem, c_error, perm_value)

return correction_factor
```

def test_power_calculation(grid, grid_spacing):
“””
測試修正後的功率計算
“””
try:
# 簡單的功率計算測試
if hasattr(grid, ‘T’) and hasattr(grid.T, ‘S’) and len(grid.T.S) > 0:
# 重新計算最後一步的Poynting向量
grid.T.detect_S()
grid.R.detect_S()

```
        P_T = float(grid.T.S[-1]) if grid.T.S else 0
        P_R = float(abs(grid.R.S[-1])) if grid.R.S else 0
        
        # 計算入射功率（簡化）
        E_max = float(np.max(np.abs(grid.E)))
        source_length = grid.Nx * grid_spacing
        P_incident = 0.5 * E_max**2 / 377.0 * source_length
        
        T_ratio = P_T / P_incident if P_incident > 0 else 0
        R_ratio = P_R / P_incident if P_incident > 0 else 0
        
        print(f"   修正後功率計算:")
        print(f"     P_incident = {P_incident:.2e} W/m")
        print(f"     P_transmitted = {P_T:.2e} W/m")
        print(f"     P_reflected = {P_R:.2e} W/m")
        print(f"     T = {T_ratio:.3f} ({T_ratio*100:.1f}%)")
        print(f"     R = {R_ratio:.3f} ({R_ratio*100:.1f}%)")
        print(f"     T + R = {T_ratio + R_ratio:.3f}")
        
        # 與理論值比較
        R_theory = ((1.0 - 1.5) / (1.0 + 1.5))**2
        T_theory = 1 - R_theory
        
        print(f"\n   與理論對比:")
        print(f"     理論: T={T_theory:.3f}, R={R_theory:.3f}")
        print(f"     計算: T={T_ratio:.3f}, R={R_ratio:.3f}")
        
        if abs(T_ratio - T_theory) < 0.1 and abs(R_ratio - R_theory) < 0.1:
            print(f"     ✅ 與理論值接近！修正有效")
        else:
            print(f"     ⚠️ 仍與理論值有差異")
            
except Exception as e:
    print(f"   功率計算測試失敗: {e}")
```

# 使用方法

def usage_example():
“””
使用示例
“””
print(”””
🔧 使用方法：

1. 在您的 test_bloch_PW_xz4.py 中添加：

# 在模擬完成後

if **name** == “**main**”:
try:
results, grid = run_simulation(with_structure=True, total_steps=600)

```
    # 診斷並修正阻抗問題
    correction_factor = complete_impedance_fix(grid, grid_spacing)
    
except Exception as e:
    print(f"錯誤: {e}")
```

1. 根據輸出的建議，檢查並修正：
- Grid.**init**() 中的 time_step 計算
- backend.py 中的 c0 值
- update_H() 中的係數
1. 修正後重新運行模擬
   “””)

if **name** == “**main**”:
print(“阻抗問題修正工具”)
usage_example()