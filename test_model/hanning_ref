<!DOCTYPE html>

<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>包絡公式差異對比</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        .chart-container {
            background: white;
            padding: 20px;
            margin: 20px 0;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .formula-box {
            background: #2d3748;
            color: #e2e8f0;
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
            font-family: 'Courier New', monospace;
            font-size: 16px;
        }
        .explanation-box {
            background: #e8f4f8;
            padding: 15px;
            margin: 15px 0;
            border-left: 4px solid #2196F3;
            border-radius: 5px;
        }
        .comparison-box {
            background: #fff3cd;
            padding: 15px;
            margin: 15px 0;
            border-left: 4px solid #ffc107;
            border-radius: 5px;
        }
        .grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        .full-width {
            grid-column: 1 / -1;
        }
        h2 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
        }
        .highlight {
            background: #ffeb3b;
            padding: 2px 4px;
            border-radius: 3px;
        }
        @media (max-width: 768px) {
            .grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>包絡公式差異深度對比</h1>

```
    <h2>1. 公式結構分析</h2>
    
    <div class="grid">
        <div>
            <h3>標準Hanning窗</h3>
            <div class="formula-box">
```

envelope = 0.5 × (1 - cos(2π × t/n))

其中：
• t: 當前位置 (0 → n)
• n: 總長度
• t/n: 進度 (0 → 1)
• 2π×(t/n): 相位 (0 → 2π)
</div>

```
            <div class="explanation-box">
                <strong>設計理念</strong>：<br>
                • 固定形狀的窗函數<br>
                • 總是完整的半個餘弦週期<br>
                • 歸一化進度：從0平滑到1再到0
            </div>
        </div>
        
        <div>
            <h3>Flaport包絡</h3>
            <div class="formula-box">
```

envelope = 0.5 × (1 - cos(f × t / n))

其中：
• f: 頻率參數 (frequency_sim)
• t: 時間參數 (q × hanning_dt_sim)
• n: cycle數 (5)
• f×t/n: 計算出的相位角
</div>

```
            <div class="explanation-box">
                <strong>設計理念</strong>：<br>
                • 與載波頻率相關的包絡<br>
                • 包絡的"頻率"受f參數控制<br>
                • 與信號週期性相關聯
            </div>
        </div>
    </div>

    <h2>2. 實際數值計算對比</h2>
    
    <div class="chart-container">
        <h3>使用您的實際參數</h3>
        <canvas id="actualParameters" width="800" height="400"></canvas>
        <div class="comparison-box">
            <strong>您的參數</strong>：<br>
            • frequency_sim = 0.009 (1/timestep)<br>
            • hanning_dt_sim = 55.35<br>
            • cycle = 5<br>
            • f × t / n = 0.009 × (q × 55.35) / 5 = q × 0.0996
        </div>
    </div>

    <h2>3. 關鍵差異：2π vs f×dt/n</h2>
    
    <div class="chart-container full-width">
        <h3>相位角度對比</h3>
        <canvas id="phaseComparison" width="1000" height="500"></canvas>
    </div>

    <div class="explanation-box">
        <h3>🎯 為什麼Flaport不用2π？</h3>
        <p><strong>原因1：頻率相關性</strong></p>
        <ul>
            <li>Flaport想讓包絡的"頻率"與載波頻率成比例</li>
            <li>f × t 給出的是累積相位，除以n是為了拉長包絡</li>
            <li>這樣包絡的變化速度與信號頻率相關</li>
        </ul>
        
        <p><strong>原因2：參數化控制</strong></p>
        <ul>
            <li>通過調整hanning_dt，可以控制包絡的"寬度"</li>
            <li>不是固定的窗形狀，而是可調的包絡</li>
        </ul>
    </div>

    <h2>4. 實際效果比較</h2>
    
    <div class="grid">
        <div class="chart-container">
            <h3>標準Hanning窗效果</h3>
            <canvas id="standardEffect" width="400" height="300"></canvas>
            <div class="formula-box">
```

# 固定形狀，5個週期的脈衝

pulse_length = 5 * period_sim
progress = q / pulse_length
envelope = 0.5 * (1 - cos(2π * progress))
</div>
</div>

```
        <div class="chart-container">
            <h3>Flaport方式效果</h3>
            <canvas id="flopartEffect" width="400" height="300"></canvas>
            <div class="formula-box">
```

# 頻率相關形狀

t = q * hanning_dt_sim
envelope = 0.5 * (1 - cos(f * t / n))
</div>
</div>
</div>

```
    <h2>5. 您的選擇建議</h2>
    
    <div class="comparison-box">
        <h3>🤔 應該用哪種？</h3>
        
        <p><strong>標準Hanning（推薦）</strong>：</p>
        <ul>
            <li>✅ 簡單直觀，易於理解</li>
            <li>✅ 固定的脈衝形狀</li>
            <li>✅ 容易控制脈衝寬度</li>
            <li>✅ 與信號處理標準一致</li>
        </ul>
        
        <p><strong>Flaport方式</strong>：</p>
        <ul>
            <li>⚡ 包絡與載波頻率相關</li>
            <li>⚡ 參數調節更複雜</li>
            <li>⚡ 可能不如標準窗直觀</li>
        </ul>
    </div>

    <div class="formula-box">
```

<span style="color: #68d391"># 推薦的簡化實現</span>
def update_E(self):
q = self.grid.time_steps_passed
time_phase = self.omega_sim * q + self.phase_shift

```
if self.pulse:
    pulse_duration = int(self.cycle * self.period_sim)  <span style="color: #fbb6ce"># 5個光學週期</span>
    
    if q < pulse_duration:
        progress = q / pulse_duration  <span style="color: #fbb6ce"># 0到1</span>
        envelope = 0.5 * (1 - bd.cos(2 * bd.pi * progress))  <span style="color: #fbb6ce"># 標準Hanning</span>
    else:
        envelope = 0
else:
    envelope = 1

<span style="color: #fbb6ce"># 其他代碼保持不變...</span>
    </div>
</div>

<script>
    // 設定參數
    const frequency_sim = 0.009;
    const hanning_dt_sim = 55.35;
    const cycle = 5;
    const period_sim = 110.7;
    
    const timesteps = 800;
    const q_array = Array.from({length: timesteps}, (_, i) => i);
    
    // 圖表配置
    const chartConfig = {
        type: 'line',
        options: {
            responsive: true,
            elements: { point: { radius: 0 } },
            plugins: { legend: { display: true } },
            scales: {
                x: { title: { display: true } },
                y: { title: { display: true } }
            }
        }
    };
    
    // 1. 實際參數計算
    const flopart_phase = q_array.map(q => {
        const t = q * hanning_dt_sim;
        return frequency_sim * t / cycle;
    });
    
    const standard_phase = q_array.map(q => {
        const pulse_duration = cycle * period_sim;
        if (q < pulse_duration) {
            return 2 * Math.PI * q / pulse_duration;
        }
        return 2 * Math.PI;
    });
    
    new Chart(document.getElementById('actualParameters'), {
        ...chartConfig,
        data: {
            labels: q_array,
            datasets: [
                {
                    label: 'Flaport相位：f×t/n',
                    data: flopart_phase,
                    borderColor: '#e74c3c',
                    borderWidth: 2,
                    fill: false
                },
                {
                    label: '標準相位：2π×progress',
                    data: standard_phase,
                    borderColor: '#3498db',
                    borderWidth: 2,
                    borderDash: [5, 5],
                    fill: false
                }
            ]
        },
        options: {
            ...chartConfig.options,
            scales: {
                x: { title: { display: true, text: 'Timesteps (q)' } },
                y: { title: { display: true, text: '相位角 (radians)' } }
            }
        }
    });
    
    // 2. 相位比較
    const comparison_q = Array.from({length: 600}, (_, i) => i);
    const flopart_phase_comp = comparison_q.map(q => {
        const t = q * hanning_dt_sim;
        return frequency_sim * t / cycle;
    });
    
    const standard_phase_comp = comparison_q.map(q => {
        const pulse_duration = cycle * period_sim;
        return 2 * Math.PI * q / pulse_duration;
    });
    
    new Chart(document.getElementById('phaseComparison'), {
        ...chartConfig,
        data: {
            labels: comparison_q,
            datasets: [
                {
                    label: 'Flaport: f×t/n = q×0.0996',
                    data: flopart_phase_comp,
                    borderColor: '#e74c3c',
                    borderWidth: 3,
                    fill: false
                },
                {
                    label: '標準: 2π×(q/total)',
                    data: standard_phase_comp,
                    borderColor: '#3498db',
                    borderWidth: 3,
                    fill: false
                },
                {
                    label: '2π線（完整週期）',
                    data: Array(comparison_q.length).fill(2 * Math.PI),
                    borderColor: '#95a5a6',
                    borderWidth: 2,
                    borderDash: [10, 5],
                    fill: false
                }
            ]
        },
        options: {
            ...chartConfig.options,
            scales: {
                x: { title: { display: true, text: 'Timesteps (q)' } },
                y: { title: { display: true, text: '相位角 (radians)' } }
            }
        }
    });
    
    // 3. 包絡效果比較
    const pulse_duration = cycle * period_sim;
    const envelope_q = Array.from({length: Math.floor(pulse_duration * 1.5)}, (_, i) => i);
    
    // 標準Hanning
    const standard_envelope = envelope_q.map(q => {
        if (q < pulse_duration) {
            const progress = q / pulse_duration;
            return 0.5 * (1 - Math.cos(2 * Math.PI * progress));
        }
        return 0;
    });
    
    // Flaport方式
    const flopart_envelope = envelope_q.map(q => {
        const t = q * hanning_dt_sim;
        const phase = frequency_sim * t / cycle;
        return 0.5 * (1 - Math.cos(phase));
    });
    
    new Chart(document.getElementById('standardEffect'), {
        ...chartConfig,
        data: {
            labels: envelope_q,
            datasets: [{
                label: '標準Hanning包絡',
                data: standard_envelope,
                borderColor: '#2196F3',
                backgroundColor: 'rgba(33, 150, 243, 0.2)',
                borderWidth: 3,
                fill: true
            }]
        },
        options: {
            ...chartConfig.options,
            scales: {
                x: { title: { display: true, text: 'Timesteps' } },
                y: { title: { display: true, text: 'Envelope' } }
            }
        }
    });
    
    new Chart(document.getElementById('flopartEffect'), {
        ...chartConfig,
        data: {
            labels: envelope_q,
            datasets: [{
                label: 'Flaport包絡',
                data: flopart_envelope,
                borderColor: '#e74c3c',
                backgroundColor: 'rgba(231, 76, 60, 0.2)',
                borderWidth: 3,
                fill: true
            }]
        },
        options: {
            ...chartConfig.options,
            scales: {
                x: { title: { display: true, text: 'Timesteps' } },
                y: { title: { display: true, text: 'Envelope' } }
            }
        }
    });
</script>
```

</body>
</html>